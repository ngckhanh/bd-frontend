"use client";

import { use, useEffect, useState, useCallback } from "react";
import toast from "react-hot-toast";
import instance from "@/axiosInstance/instance";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from "@/components/ui/accordion";
import { Card, CardContent } from "@/components/ui/card";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import TextHighlighter from "@/components/text-highlighter";
import {
  ArrowRight,
  ArrowUpRight,
  Blend,
  BookA,
  Bot,
  Calendar,
  CheckCircle2,
  Clock,
  Cog,
  Copy,
  EqualApproximately,
  Headphones,
  Info,
  Medal,
  MessageCircle,
  MessageCircleMore,
  Mic,
  Pencil,
  PenLineIcon,
  Share2,
  SparklesIcon,
  Speech,
  TrendingDown,
  TrendingUp,
  User2Icon,
} from "lucide-react";
import reactStringReplace from "react-string-replace";
import { buildStyles, CircularProgressbar } from "react-circular-progressbar";
import "react-circular-progressbar/dist/styles.css";
import { Progress } from "@/components/ui/progress";
import { Button } from "@/components/ui/button";
import { Skeleton } from "@/components/ui/skeleton";
import { useRouter } from "next/navigation";
import { motion } from "motion/react";
import { Input } from "@/components/ui/input";
import {
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselNext,
  CarouselPrevious,
} from "@/components/ui/carousel";
import useUserStore from "@/app/(store)/userStore";
import Image from "next/image";
import {
  Drawer,
  DrawerContent,
  DrawerDescription,
  DrawerHeader,
  DrawerTitle,
  DrawerTrigger,
} from "@/components/ui/drawer";
import { Badge } from "@/components/ui/badge";
import HorizontalAd from "@/components/horizontal-ad";

export default function ViewSubmission(props) {
  const taskData = use(props.params);
  const [testData, setTestData] = useState({});
  const [isInitialLoading, setIsInitialLoading] = useState(true);
  const [partOne, setPartOne] = useState([]);
  const [partTwo, setPartTwo] = useState("");
  const [partThree, setPartThree] = useState([]);
  const [partOneEntirety, setPartOneEntirety] = useState("");
  const [partTwoAndThreeEntirety, setPartTwoAndThreeEntirety] = useState("");
  const router = useRouter();
  const userStore = useUserStore();
  const [adClosable, setAdClosable] = useState(false);

  const improve = useCallback((testData, toImprove) => {
    const improvements = [
      {
        type: "grammar",
        data: testData.review.grammar_improvements,
        className: "text-red-600 underline underline-1 underline-red-600",
      },
      {
        type: "vocab",
        data: testData.review.vocab_improvements,
        className: "text-yellow-600 underline underline-1 underline-yellow-600",
      },
    ];

    improvements.forEach(({ data, className }) => {
      data.forEach((v) => {
        toImprove = reactStringReplace(toImprove, v.to_improve, (match, i) => (
          <Popover key={`${i}-improve-${v.improvement}`}>
            <PopoverTrigger asChild>
              <span
                className={`w-fit ${className} font-semibold hover:bg-opacity-70 transition ease-in-out duration-150 focus-visible:bg-opacity-70`}
              >
                {match}
              </span>
            </PopoverTrigger>
            <PopoverContent>
              <div>
                <div className="mb-2">
                  <p>Thay v√¨ d√πng</p>
                  <p className="text-amber-500 italic font-semibold">{match}</p>
                </div>
                <div className="mb-2">
                  <p>B·∫°n c√≥ th·ªÉ d√πng</p>
                  <p className="text-green-500 italic font-semibold">
                    {v.improvement}
                  </p>
                </div>
              </div>
            </PopoverContent>
          </Popover>
        ));
      });
    });

    return toImprove;
  }, []);

  const improveFunc = (testData, toImprove) => {
    const improvements = [
      {
        type: "grammar",
        data: testData.review.grammar_improvements,
        className: "text-red-600 underline underline-1 underline-red-600",
      },
      {
        type: "vocab",
        data: testData.review.vocab_improvements,
        className: "text-yellow-600 underline underline-1 underline-yellow-600",
      },
    ];

    improvements.forEach(({ data, className }) => {
      data.forEach((v) => {
        toImprove = reactStringReplace(toImprove, v.to_improve, (match, i) => (
          <Popover key={`${i}-improve-${v.improvement}`}>
            <PopoverTrigger asChild>
              <span
                className={`w-fit ${className} font-semibold hover:bg-opacity-70 transition ease-in-out duration-150 focus-visible:bg-opacity-70`}
              >
                {match}
              </span>
            </PopoverTrigger>
            <PopoverContent>
              <div>
                <div className="mb-2">
                  <p>Thay v√¨ d√πng</p>
                  <p className="text-amber-500 italic font-semibold">{match}</p>
                </div>
                <div className="mb-2">
                  <p>B·∫°n c√≥ th·ªÉ d√πng</p>
                  <p className="text-green-500 italic font-semibold">
                    {v.improvement}
                  </p>
                </div>
              </div>
            </PopoverContent>
          </Popover>
        ));
      });
    });

    return toImprove;
  };

  const fetchTestData = useCallback(async () => {
    try {
      let response;
      await instance
        .get(`/speaking/personal/get/${taskData.taskNum}/${taskData.subId}`, {
          headers: { Authorization: localStorage.getItem("token") },
        })
        .then((res) => {
          response = res;
        })
        .catch((err) => {
          toast.error("Kh√¥ng t√¨m th·∫•y b√†i l√†m c·ªßa b·∫°n");
          window.location.href = "/speaking";
        });

      setTestData((prevData) => {
        const newData = response.data.data;
        if (JSON.stringify(prevData) === JSON.stringify(newData)) {
          return prevData; // No change, return the previous state
        }

        if (newData.finished) {
          if (newData.task === "1") {
            setPartOne(
              newData.review.specific_feedback.map((v) => ({
                question: v.question,
                response: improve(newData, v.user_response),
                feedback: v.feedback,
                improved_version: v.improved_version,
              }))
            );
            setPartOneEntirety(improve(newData, newData.user_response_raw));
          } else {
            setPartTwo(
              newData.user_response_task_two === ""
                ? improve(newData, newData.user_response_raw)
                : improve(newData, newData.user_response_task_two)
            );
            setPartThree(
              JSON.stringify(newData.user_response_task_three) === "{}"
                ? []
                : newData.user_response_task_three.map((v) => ({
                    question: v.question,
                    response: improve(newData, v.response),
                    improved_version: v.improved_version,
                  }))
            );
          }
        }

        return newData;
      });
    } catch (err) {
      console.error(err);
      toast.error(
        "ƒê√£ c√≥ l·ªói x·∫£y ra khi t·∫£i d·ªØ li·ªáu. Vui l√≤ng t·∫£i l·∫°i trang ƒë·ªÉ th·ª≠ l·∫°i"
      );
    } finally {
      setIsInitialLoading(false);
    }
  }, [taskData.taskNum, taskData.subId, improve]);

  useEffect(() => {
    fetchTestData();
    const checkInterval = setInterval(() => {
      if (testData.finished) clearInterval(checkInterval);
      else fetchTestData();
    }, 3000);
    setTimeout(() => { setAdClosable(true) }, 10000) // Set a 10 second ad timer to make sure the ad is viewable first
    return () => clearInterval(checkInterval);
  }, [fetchTestData]);

  if (isInitialLoading) {
    return <LoadingSkeleton />;
  } else {
    if (testData.finished === false) {
      if (
        testData.error_occurred === false &&
        testData.uploaded_content === ""
      ) {
        return (
          <motion.div
            className="h-screen w-full flex items-center justify-center md:p-5 p-3"
            initial={{ opacity: 0 }}
            animate={{ opacity: 100 }}
            transition={{ duration: 0.3 }}
          >
            <div className="w-full md:w-[70%]">
              <p className="text-center text-8xl mb-5">ü•∏</p>
              <p className="text-center text-3xl font-semibold">
                C√≥ v·∫ª nh∆∞ b·∫°n ch∆∞a n·ªôp b√†i n√†y
              </p>
              <p className="text-center text-slate-500 font-semibold mb-5">
                H√£y quay l·∫°i trang n√†y sau khi b·∫°n ƒë√£ n·ªôp b√†i nha. B·∫°n c√≥ th·ªÉ
                quay l·∫°i ph√≤ng thi b·∫±ng n√∫t b√™n d∆∞·ªõi.
              </p>
              <div className="w-full flex items-center">
                <Button
                  onClick={() =>
                    router.push(
                      `/speaking/view/task/${testData.task}/id/${taskData.subId}/take`
                    )
                  }
                  className="m-auto"
                >
                  ƒê∆∞a t√¥i quay l·∫°i ph√≤ng thi <ArrowUpRight />
                </Button>
              </div>
            </div>
          </motion.div>
        );
      } else if (testData.error_occurred === true) {
        return (
          <motion.div
            className="h-screen w-full flex items-center justify-center md:p-5 p-3"
            initial={{ opacity: 0 }}
            animate={{ opacity: 100 }}
            transition={{ duration: 0.3 }}
          >
            <div className="w-full md:min-w-[50%] md:max-w-[70%]">
              <p className="text-center text-8xl mb-5">üò±</p>
              <p className="text-center text-3xl font-semibold">
                B√†i c·ªßa b·∫°n ƒë√£ g·∫∑p l·ªói trong qu√° tr√¨nh ch·∫•m b√†i
              </p>
              <p className="text-center text-slate-500 font-semibold mb-5">
                Li√™n l·∫°c v·ªõi ch√∫ng m√¨nh ƒë·ªÉ ƒë∆∞·ª£c ho√†n ti·ªÅn nha. Ch√∫ng m√¨nh xin
                l·ªói v√¨ s·ª± b·∫•t ti·ªán n√†y.
              </p>
              <div className="w-full flex items-center">
                <Button
                  onClick={() => router.push(`/speaking/support`)}
                  className="m-auto"
                  variant="destructive"
                >
                  Li√™n h·ªá h·ªó tr·ª£ <ArrowUpRight />
                </Button>
              </div>
            </div>
          </motion.div>
        );
      } else {
        return (
          <motion.div
            className="h-screen w-full flex items-center justify-center md:p-5 p-3"
            initial={{ opacity: 0 }}
            animate={{ opacity: 100 }}
            transition={{ duration: 0.3 }}
          >
            <div className="w-full md:min-w-[50%] md:max-w-[70%]">
              <p className="text-center text-8xl mb-5">ü•≥</p>
              <p className="text-center text-3xl font-semibold">
                B·∫°n ƒë√£ n·ªôp b√†i th√†nh c√¥ng
              </p>
              <p className="text-center text-slate-500 font-semibold mb-5">
                H√£y gi·ªØ trang n√†y m·ªü nha. ƒê·ª©ng d·∫≠y u·ªëng n∆∞·ªõc trong khi ch√∫ng
                m√¨nh ƒëang ƒë√°nh gi√° b√†i c·ªßa b·∫°n m·ªôt c√°ch nhanh nh·∫•t!
              </p>
              <div className="w-full flex items-center">
                <Button
                  onClick={() => router.push(`/speaking/support`)}
                  className="m-auto"
                  variant="destructive"
                >
                  Li√™n h·ªá h·ªó tr·ª£ <ArrowUpRight />
                </Button>
              </div>
            </div>
          </motion.div>
        );
      }
    } else {
      return (
        <motion.div
          className="w-full h-screen overflow-auto pt-25 md:px-10 px-5"
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }} //Thay ƒë·ªïi v·ªõi 100
          transition={{ duration: 0.3 }}
        >
          <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-6 mb-10">
            <div className="flex flex-col">
              <div className="flex items-center gap-3 mb-2">
                <h1 className="text-3xl font-bold tracking-tight">
                  K·∫øt qu·∫£ b√†i thi
                </h1>
                <Badge
                  variant="outline"
                  className="rounded-full border-primary/20 bg-primary/10 text-primary px-3 py-1"
                >
                  {testData.task === "1" ? "Part 1" : "Part 2 & 3"}
                </Badge>
                <p></p>
              </div>
              <div className="flex flex-wrap gap-2 text-sm">
                <Badge
                  variant="secondary"
                  className="rounded-full flex items-center gap-1.5"
                >
                  <Calendar size={14} />
                  <span>{testData.created_at.split(" ")[0]}</span>
                </Badge>
                <Badge
                  variant="secondary"
                  className="rounded-full flex items-center gap-1.5"
                >
                  <Clock size={14} />
                  <span>{testData.created_at.split(" ")[1]}</span>
                </Badge>
                <Badge
                  variant={testData.finished ? "success" : "warning"}
                  className={`rounded-full flex items-center gap-1.5 ${
                    testData.finished
                      ? "bg-green-100 text-green-700 dark:bg-green-900/30 dark:text-green-400"
                      : "bg-amber-100 text-amber-700 dark:bg-amber-900/30 dark:text-amber-400"
                  }`}
                >
                  {testData.finished ? (
                    <CheckCircle2 size={14} />
                  ) : (
                    <AlertCircle size={14} />
                  )}
                  <span>
                    {testData.finished ? "Ch·∫•m th√†nh c√¥ng" : "ƒêang ch·∫•m"}
                  </span>
                </Badge>
              </div>
            </div>
            <div className="flex items-center gap-3">
              <Popover>
                <PopoverTrigger asChild>
                  <Button
                    variant="outline"
                    size="icon"
                    className="rounded-full h-10 w-10"
                  >
                    <Share2 size={18} />
                  </Button>
                </PopoverTrigger>
                <PopoverContent className="w-80">
                  <div className="space-y-4">
                    <div className="space-y-2">
                      <h4 className="font-medium">Chia s·∫ª k·∫øt qu·∫£</h4>
                      <p className="text-sm text-muted-foreground">
                        S·ª≠ d·ª•ng link d∆∞·ªõi ƒë√¢y ƒë·ªÉ chia s·∫ª b√†i l√†m c·ªßa b·∫°n
                      </p>
                    </div>
                    <div className="flex items-center space-x-2">
                      <Input
                        readOnly
                        value={`https://bachduong.app/view/task/${taskData.taskNum}/id/${taskData.subId}`}
                        className="h-9"
                      />
                      <Button
                        size="sm"
                        variant="outline"
                        className="px-3"
                        onClick={() => {
                          navigator.clipboard.writeText(
                            `https://bachduong.app/view/task/${taskData.taskNum}/id/${taskData.subId}`
                          );
                          toast.success("ƒê√£ copy link");
                        }}
                      >
                        <Copy size={14} />
                      </Button>
                    </div>
                  </div>
                </PopoverContent>
              </Popover>
            </div>
          </div>
          {/* <div className="w-full p-3 rounded-lg border border-1 mb-5">
            <p className="text-slate-500 text-sm flex items-center space-x-1 font-semibold tracking-tight">
              <Info size="12"/> 
              <span>Qu·∫£ng c√°o</span>
            </p>
            <HorizontalAd/>
          </div> */}
          <div className="w-full md:flex md:space-x-5 mb-10">
            <div className="grow md:grid hidden md:grid-cols-2 grid-cols-1 gap-2 md:mb-0 mb-5">
              <div className="rounded-lg md:p-5 p-3 bg-white border-1">
                <div className="flex items-center space-x-3 mb-5">
                  <div className="bg-primary/10 rounded-full text-primary font-semibold p-3 text-sm w-fit">
                    <BookA />
                  </div>
                  <p className="text-slate-500">Lexical Resources</p>
                </div>
                <p className="text-2xl font-semibold mb-3">
                  T·ª´ v·ª±ng -{" "}
                  <span className="text-primary">
                    {testData.lexical_resource.indexOf(".") !== -1
                      ? testData.lexical_resource
                      : testData.lexical_resource + ".0"}
                  </span>
                </p>
                {parseFloat(testData.lexical_resource_improvement) > 0 && (
                  <p className="text-green-600 mb-3 flex items-center space-x-2 font-semibold">
                    <TrendingUp size={20} />
                    <span>
                      TƒÉng {testData.lexical_resource_improvement} band so v·ªõi
                      b√†i tr∆∞·ªõc
                    </span>
                  </p>
                )}
                {parseFloat(testData.lexical_resource_improvement) < 0 && (
                  <p className="text-red-600 mb-3 flex items-center space-x-2 font-semibold">
                    <TrendingDown size={20} />
                    <span>
                      Gi·∫£m{" "}
                      {parseFloat(testData.lexical_resource_improvement) * -1}{" "}
                      band so v·ªõi b√†i tr∆∞·ªõc
                    </span>
                  </p>
                )}
                {parseFloat(testData.lexical_resource_improvement) === 0 && (
                  <p className="text-amber-600 mb-3 flex items-center space-x-2">
                    <EqualApproximately size={20} />
                    <span>Band kh√¥ng ƒë·ªïi</span>
                  </p>
                )}
                <Progress
                  value={
                    (Number.parseFloat(testData.lexical_resource) / 9) * 100
                  }
                  className="mb-3"
                />
                <p className="text-slate-500 text-sm font-semibold">
                  {0.0 <= Number.parseFloat(testData.lexical_resource) &&
                    Number.parseFloat(testData.lexical_resource) <= 4.0 &&
                    "C·∫ßn c·∫£i thi·ªán nhi·ªÅu! - Kh√≥ truy·ªÅn ƒë·∫°t √Ω, ng·ªØ ph√°p v√† t·ª´ v·ª±ng y·∫øu."}
                  {4.5 <= Number.parseFloat(testData.lexical_resource) &&
                    Number.parseFloat(testData.lexical_resource) <= 6.5 &&
                    "Kh√° ·ªïn! - Giao ti·∫øp ƒë∆∞·ª£c nh∆∞ng c√≤n l·ªói ng·ªØ ph√°p, t·ª´ v·ª±ng."}
                  {7.0 <= Number.parseFloat(testData.lexical_resource) &&
                    Number.parseFloat(testData.lexical_resource) <= 8.0 &&
                    "R·∫•t t·ªët! - Tr√¥i ch·∫£y, t·ª´ v·ª±ng phong ph√∫, √≠t l·ªói."}
                  {Number.parseFloat(testData.lexical_resource) > 8.0 &&
                    "Xu·∫•t s·∫Øc! - T·ª± nhi√™n, ch√≠nh x√°c, g·∫ßn nh∆∞ b·∫£n x·ª©. üëè"}
                </p>
              </div>
              <div className="rounded-lg md:p-5 p-3 bg-white border-1">
                <div className="flex items-center space-x-3 mb-5">
                  <div className="bg-primary/10 rounded-full text-primary font-semibold p-3 text-sm w-fit">
                    <Medal />
                  </div>
                  <p className="text-slate-500">Grammatical Range</p>
                </div>
                <p className="text-2xl font-semibold mb-3">
                  Ng·ªØ ph√°p -{" "}
                  <span className="text-primary">
                    {testData.grammatical_range.indexOf(".") !== -1
                      ? testData.grammatical_range
                      : testData.grammatical_range + ".0"}
                  </span>
                </p>
                {parseFloat(testData.grammatical_range_improvement) > 0 && (
                  <p className="text-green-600 mb-3 flex items-center space-x-2 font-semibold">
                    <TrendingUp size={20} />
                    <span>
                      TƒÉng {testData.grammatical_range_improvement} so v·ªõi b√†i
                      tr∆∞·ªõc
                    </span>
                  </p>
                )}
                {parseFloat(testData.grammatical_range_improvement) < 0 && (
                  <p className="text-red-600 mb-3 flex items-center space-x-2 font-semibold">
                    <TrendingDown size={20} />
                    <span>
                      Gi·∫£m{" "}
                      {parseFloat(testData.grammatical_range_improvement) * -1}{" "}
                      band so v·ªõi b√†i tr∆∞·ªõc
                    </span>
                  </p>
                )}
                {parseFloat(testData.grammatical_range_improvement) === 0 && (
                  <p className="text-amber-600 mb-3 flex items-center space-x-2">
                    <EqualApproximately size={20} />
                    <span>Band kh√¥ng ƒë·ªïi</span>
                  </p>
                )}
                <Progress
                  value={
                    (Number.parseFloat(testData.grammatical_range) / 9) * 100
                  }
                  className="mb-3"
                  indicatorColor="bg-primary"
                />
                <p className="text-slate-500 text-sm font-semibold">
                  {0.0 <= Number.parseFloat(testData.grammatical_range) &&
                    Number.parseFloat(testData.grammatical_range) <= 4.0 &&
                    "C·∫ßn c·∫£i thi·ªán nhi·ªÅu! - Kh√≥ truy·ªÅn ƒë·∫°t √Ω, ng·ªØ ph√°p v√† t·ª´ v·ª±ng y·∫øu."}
                  {4.5 <= Number.parseFloat(testData.grammatical_range) &&
                    Number.parseFloat(testData.grammatical_range) < 6.5 &&
                    "Kh√° ·ªïn! - Giao ti·∫øp ƒë∆∞·ª£c nh∆∞ng c√≤n l·ªói ng·ªØ ph√°p, t·ª´ v·ª±ng."}
                  {7.0 <= Number.parseFloat(testData.grammatical_range) &&
                    Number.parseFloat(testData.grammatical_range) <= 8.0 &&
                    "R·∫•t t·ªët! - Tr√¥i ch·∫£y, t·ª´ v·ª±ng phong ph√∫, √≠t l·ªói."}
                  {Number.parseFloat(testData.grammatical_range) > 8.0 &&
                    "Xu·∫•t s·∫Øc! - T·ª± nhi√™n, ch√≠nh x√°c, g·∫ßn nh∆∞ b·∫£n x·ª©. üëè"}
                </p>
              </div>
              <div className="rounded-lg md:p-5 p-3 bg-white border-1">
                <div className="flex items-center space-x-3 mb-5">
                  <div className="bg-primary/10 rounded-full text-primary font-semibold p-3 text-sm w-fit">
                    <Blend />
                  </div>
                  <p className="text-slate-500">Fluency and Coherence</p>
                </div>
                <p className="text-2xl font-semibold mb-3">
                  Tr√¥i ch·∫£y -{" "}
                  <span className="text-primary">
                    {testData.fluency_coherence.indexOf(".") !== -1
                      ? testData.fluency_coherence
                      : testData.fluency_coherence + ".0"}
                  </span>
                </p>
                {parseFloat(testData.fluency_coherence_improvement) > 0 && (
                  <p className="text-green-600 mb-3 flex items-center space-x-2 font-semibold">
                    <TrendingUp size={20} />
                    <span>
                      TƒÉng {testData.fluency_coherence_improvement} band so v·ªõi
                      b√†i tr∆∞·ªõc
                    </span>
                  </p>
                )}
                {parseFloat(testData.fluency_coherence_improvement) < 0 && (
                  <p className="text-red-600 mb-3 flex items-center space-x-2 font-semibold">
                    <TrendingDown size={20} />
                    <span>
                      Gi·∫£m{" "}
                      {parseFloat(testData.fluency_coherence_improvement) * -1}{" "}
                      band so v·ªõi b√†i tr∆∞·ªõc
                    </span>
                  </p>
                )}
                {parseFloat(testData.fluency_coherence_improvement) === 0 && (
                  <p className="text-amber-600 mb-3 flex items-center space-x-2">
                    <EqualApproximately size={20} />
                    <span>Band kh√¥ng ƒë·ªïi</span>
                  </p>
                )}
                <Progress
                  value={
                    (Number.parseFloat(testData.fluency_coherence) / 9) * 100
                  }
                  className="mb-3"
                  indicatorColor="bg-primary"
                />
                <p className="text-slate-500 text-sm font-semibold">
                  {0.0 <= Number.parseFloat(testData.fluency_coherence) &&
                    Number.parseFloat(testData.fluency_coherence) <= 4.0 &&
                    "C·∫ßn c·∫£i thi·ªán nhi·ªÅu! - Kh√≥ truy·ªÅn ƒë·∫°t √Ω, ng·ªØ ph√°p v√† t·ª´ v·ª±ng y·∫øu."}
                  {4.5 <= Number.parseFloat(testData.fluency_coherence) &&
                    Number.parseFloat(testData.fluency_coherence) < 6.5 &&
                    "Kh√° ·ªïn! - Giao ti·∫øp ƒë∆∞·ª£c nh∆∞ng c√≤n l·ªói ng·ªØ ph√°p, t·ª´ v·ª±ng."}
                  {7.0 <= Number.parseFloat(testData.fluency_coherence) &&
                    Number.parseFloat(testData.fluency_coherence) <= 8.0 &&
                    "R·∫•t t·ªët! - Tr√¥i ch·∫£y, t·ª´ v·ª±ng phong ph√∫, √≠t l·ªói."}
                  {Number.parseFloat(testData.fluency_coherence) > 8.0 &&
                    "Xu·∫•t s·∫Øc! - T·ª± nhi√™n, ch√≠nh x√°c, g·∫ßn nh∆∞ b·∫£n x·ª©. üëè"}
                </p>
              </div>
              <div className="rounded-lg md:p-5 p-3 bg-white border-1">
                <div className="flex items-center space-x-3 mb-5">
                  <div className="bg-primary/10 rounded-full text-primary font-semibold p-3 text-sm w-fit">
                    <Speech />
                  </div>
                  <p className="text-slate-500">Pronunciation</p>
                </div>
                <p className="text-2xl font-semibold mb-3">
                  Ph√°t √¢m -{" "}
                  <span className="text-primary">
                    {testData.fluency_coherence.indexOf(".") !== -1
                      ? testData.fluency_coherence
                      : testData.fluency_coherence + ".0"}
                  </span>
                </p>
                {parseFloat(testData.fluency_coherence_improvement) > 0 && (
                  <p className="text-green-600 mb-3 flex items-center space-x-2 font-semibold">
                    <TrendingUp size={20} />
                    <span>
                      TƒÉng {testData.fluency_coherence_improvement} band so v·ªõi
                      b√†i tr∆∞·ªõc
                    </span>
                  </p>
                )}
                {parseFloat(testData.fluency_coherence_improvement) < 0 && (
                  <p className="text-red-600 mb-3 flex items-center space-x-2 font-semibold">
                    <TrendingDown size={20} />
                    <span>
                      Gi·∫£m{" "}
                      {parseFloat(testData.fluency_coherence_improvement) * -1}{" "}
                      band so v·ªõi b√†i tr∆∞·ªõc
                    </span>
                  </p>
                )}
                {parseFloat(testData.fluency_coherence_improvement) === 0 && (
                  <p className="text-amber-600 mb-3 flex items-center space-x-2">
                    <EqualApproximately size={20} />
                    <span>Band kh√¥ng ƒë·ªïi</span>
                  </p>
                )}
                <Progress
                  value={
                    (Number.parseFloat(testData.lexical_resource) / 9) * 100
                  }
                  className="mb-3"
                  indicatorColor="bg-primary"
                />
                <p className="text-slate-500 text-sm font-semibold">
                  {0.0 <= Number.parseFloat(testData.lexical_resource) &&
                    Number.parseFloat(testData.lexical_resource) <= 4.0 &&
                    "C·∫ßn c·∫£i thi·ªán nhi·ªÅu! - Kh√≥ truy·ªÅn ƒë·∫°t √Ω, ng·ªØ ph√°p v√† t·ª´ v·ª±ng y·∫øu."}
                  {4.5 <= Number.parseFloat(testData.lexical_resource) &&
                    Number.parseFloat(testData.lexical_resource) < 6.5 &&
                    "Kh√° ·ªïn! - Giao ti·∫øp ƒë∆∞·ª£c nh∆∞ng c√≤n l·ªói ng·ªØ ph√°p, t·ª´ v·ª±ng."}
                  {7.0 <= Number.parseFloat(testData.lexical_resource) &&
                    Number.parseFloat(testData.lexical_resource) <= 8.0 &&
                    "R·∫•t t·ªët! - Tr√¥i ch·∫£y, t·ª´ v·ª±ng phong ph√∫, √≠t l·ªói."}
                  {Number.parseFloat(testData.lexical_resource) > 8.0 &&
                    "Xu·∫•t s·∫Øc! - T·ª± nhi√™n, ch√≠nh x√°c, g·∫ßn nh∆∞ b·∫£n x·ª©. üëè"}
                </p>
              </div>
            </div>
            <Carousel className="md:hidden block m-auto w-full mb-5 max-w-xs flex-none">
              <p className="text-center text-slate-500 font-semibold text-sm mb-3">
                Vu·ªët sang ph·∫£i ƒë·ªÉ xem ti·∫øp
              </p>
              <CarouselContent>
                <CarouselItem>
                  <div className="rounded-lg md:p-5 p-3 bg-white border-1">
                    <div className="flex items-center space-x-3 mb-5">
                      <div className="bg-primary/10 rounded-full text-primary font-semibold p-3 text-sm w-fit">
                        <BookA />
                      </div>
                      <p className="text-slate-500">Lexical Resources</p>
                    </div>
                    <p className="text-2xl font-semibold mb-3">
                      T·ª´ v·ª±ng -{" "}
                      <span className="text-primary">
                        {testData.lexical_resource.indexOf(".") !== -1
                          ? testData.lexical_resource
                          : testData.lexical_resource + ".0"}
                      </span>
                    </p>
                    <Progress
                      value={
                        (Number.parseFloat(testData.lexical_resource) / 9) * 100
                      }
                      className="mb-3"
                    />
                    <p className="text-slate-500 text-sm font-semibold">
                      {0.0 <= Number.parseFloat(testData.lexical_resource) &&
                        Number.parseFloat(testData.lexical_resource) <= 4.0 &&
                        "C·∫ßn c·∫£i thi·ªán nhi·ªÅu! - Kh√≥ truy·ªÅn ƒë·∫°t √Ω, ng·ªØ ph√°p v√† t·ª´ v·ª±ng y·∫øu."}
                      {4.5 <= Number.parseFloat(testData.lexical_resource) &&
                        Number.parseFloat(testData.lexical_resource) <= 6.5 &&
                        "Kh√° ·ªïn! - Giao ti·∫øp ƒë∆∞·ª£c nh∆∞ng c√≤n l·ªói ng·ªØ ph√°p, t·ª´ v·ª±ng."}
                      {7.0 <= Number.parseFloat(testData.lexical_resource) &&
                        Number.parseFloat(testData.lexical_resource) <= 8.0 &&
                        "R·∫•t t·ªët! - Tr√¥i ch·∫£y, t·ª´ v·ª±ng phong ph√∫, √≠t l·ªói."}
                      {Number.parseFloat(testData.lexical_resource) > 8.0 &&
                        "Xu·∫•t s·∫Øc! - T·ª± nhi√™n, ch√≠nh x√°c, g·∫ßn nh∆∞ b·∫£n x·ª©. üëè"}
                    </p>
                  </div>
                </CarouselItem>
                <CarouselItem>
                  <div className="rounded-lg md:p-5 p-3 bg-white border-1">
                    <div className="flex items-center space-x-3 mb-5">
                      <div className="bg-primary/10 rounded-full text-primary font-semibold p-3 text-sm w-fit">
                        <Cog />
                      </div>
                      <p className="text-slate-500">Grammatical Range</p>
                    </div>
                    <p className="text-2xl font-semibold mb-3">
                      Ng·ªØ ph√°p -{" "}
                      <span className="text-primary">
                        {testData.grammatical_range.indexOf(".") !== -1
                          ? testData.grammatical_range
                          : testData.grammatical_range + ".0"}
                      </span>
                    </p>
                    <Progress
                      value={
                        (Number.parseFloat(testData.grammatical_range) / 9) *
                        100
                      }
                      className="mb-3"
                      indicatorColor="bg-primary"
                    />
                    <p className="text-slate-500 text-sm font-semibold">
                      {0.0 <= Number.parseFloat(testData.grammatical_range) &&
                        Number.parseFloat(testData.grammatical_range) <= 4.0 &&
                        "C·∫ßn c·∫£i thi·ªán nhi·ªÅu! - Kh√≥ truy·ªÅn ƒë·∫°t √Ω, ng·ªØ ph√°p v√† t·ª´ v·ª±ng y·∫øu."}
                      {4.5 <= Number.parseFloat(testData.grammatical_range) &&
                        Number.parseFloat(testData.grammatical_range) < 6.5 &&
                        "Kh√° ·ªïn! - Giao ti·∫øp ƒë∆∞·ª£c nh∆∞ng c√≤n l·ªói ng·ªØ ph√°p, t·ª´ v·ª±ng."}
                      {7.0 <= Number.parseFloat(testData.grammatical_range) &&
                        Number.parseFloat(testData.grammatical_range) <= 8.0 &&
                        "R·∫•t t·ªët! - Tr√¥i ch·∫£y, t·ª´ v·ª±ng phong ph√∫, √≠t l·ªói."}
                      {Number.parseFloat(testData.grammatical_range) > 8.0 &&
                        "Xu·∫•t s·∫Øc! - T·ª± nhi√™n, ch√≠nh x√°c, g·∫ßn nh∆∞ b·∫£n x·ª©. üëè"}
                    </p>
                  </div>
                </CarouselItem>
                <CarouselItem>
                  <div className="rounded-lg md:p-5 p-3 bg-white border-1">
                    <div className="flex items-center space-x-3 mb-5">
                      <div className="bg-primary/10 rounded-full text-primary font-semibold p-3 text-sm w-fit">
                        <Blend />
                      </div>
                      <p className="text-slate-500">Fluency and Coherence</p>
                    </div>
                    <p className="text-2xl font-semibold mb-3">
                      Tr√¥i ch·∫£y -{" "}
                      <span className="text-primary">
                        {testData.lexical_resource.indexOf(".") !== -1
                          ? testData.fluency_coherence
                          : testData.fluency_coherence + ".0"}
                      </span>
                    </p>
                    <Progress
                      value={
                        (Number.parseFloat(testData.lexical_resource) / 9) * 100
                      }
                      className="mb-3"
                      indicatorColor="bg-primary"
                    />
                    <p className="text-slate-500 text-sm font-semibold">
                      {0.0 <= Number.parseFloat(testData.lexical_resource) &&
                        Number.parseFloat(testData.lexical_resource) <= 4.0 &&
                        "C·∫ßn c·∫£i thi·ªán nhi·ªÅu! - Kh√≥ truy·ªÅn ƒë·∫°t √Ω, ng·ªØ ph√°p v√† t·ª´ v·ª±ng y·∫øu."}
                      {4.5 <= Number.parseFloat(testData.lexical_resource) &&
                        Number.parseFloat(testData.lexical_resource) < 6.5 &&
                        "Kh√° ·ªïn! - Giao ti·∫øp ƒë∆∞·ª£c nh∆∞ng c√≤n l·ªói ng·ªØ ph√°p, t·ª´ v·ª±ng."}
                      {7.0 <= Number.parseFloat(testData.lexical_resource) &&
                        Number.parseFloat(testData.lexical_resource) <= 8.0 &&
                        "R·∫•t t·ªët! - Tr√¥i ch·∫£y, t·ª´ v·ª±ng phong ph√∫, √≠t l·ªói."}
                      {Number.parseFloat(testData.lexical_resource) > 8.0 &&
                        "Xu·∫•t s·∫Øc! - T·ª± nhi√™n, ch√≠nh x√°c, g·∫ßn nh∆∞ b·∫£n x·ª©. üëè"}
                    </p>
                  </div>
                </CarouselItem>
                <CarouselItem>
                  <div className="rounded-lg md:p-5 p-3 bg-white border-1">
                    <div className="flex items-center space-x-3 mb-5">
                      <div className="bg-primary/10 rounded-full text-primary font-semibold p-3 text-sm w-fit">
                        <Speech />
                      </div>
                      <p className="text-slate-500">Pronunciation</p>
                    </div>
                    <p className="text-2xl font-semibold mb-3">
                      Ph√°t √¢m -{" "}
                      <span className="text-primary">
                        {testData.grammatical_range.indexOf(".") !== -1
                          ? testData.grammatical_range
                          : testData.grammatical_range + ".0"}
                      </span>
                    </p>
                    <Progress
                      value={
                        (Number.parseFloat(testData.grammatical_range) / 9) *
                        100
                      }
                      className="mb-3"
                      indicatorColor="bg-primary"
                    />
                    <p className="text-slate-500 text-sm font-semibold">
                      {0.0 <= Number.parseFloat(testData.grammatical_range) &&
                        Number.parseFloat(testData.grammatical_range) <= 4.0 &&
                        "C·∫ßn c·∫£i thi·ªán nhi·ªÅu! - Kh√≥ truy·ªÅn ƒë·∫°t √Ω, ng·ªØ ph√°p v√† t·ª´ v·ª±ng y·∫øu."}
                      {4.5 <= Number.parseFloat(testData.grammatical_range) &&
                        Number.parseFloat(testData.grammatical_range) < 6.5 &&
                        "Kh√° ·ªïn! - Giao ti·∫øp ƒë∆∞·ª£c nh∆∞ng c√≤n l·ªói ng·ªØ ph√°p, t·ª´ v·ª±ng."}
                      {7.0 <= Number.parseFloat(testData.grammatical_range) &&
                        Number.parseFloat(testData.grammatical_range) <= 8.0 &&
                        "R·∫•t t·ªët! - Tr√¥i ch·∫£y, t·ª´ v·ª±ng phong ph√∫, √≠t l·ªói."}
                      {Number.parseFloat(testData.grammatical_range) > 8.0 &&
                        "Xu·∫•t s·∫Øc! - T·ª± nhi√™n, ch√≠nh x√°c, g·∫ßn nh∆∞ b·∫£n x·ª©. üëè"}
                    </p>
                  </div>
                </CarouselItem>
              </CarouselContent>
              <CarouselPrevious className="absolute left-0 transform -translate-x-1/2 translate-y-0" />
              <CarouselNext className="absolute right-0 transform translate-x-1/2 translate-y-0" />
            </Carousel>
            <div className="flex-none md:w-[35%] w-full border border-1 rounded-lg h-fit md:p-5 p-3 md:mb-0 mb-5">
              <p className="text-xl font-semibold mb-3 flex items-center space-x-2">
                <SparklesIcon /> <span>ƒê·ªÅ b√†i & Nh·∫≠n x√©t</span>
              </p>
              <Tabs className="w-full h-[400px]" defaultValue="topic">
                <TabsList className="grid w-full grid-cols-3 mb-3 rounded-full">
                  <TabsTrigger
                    value="topic"
                    className="rounded-full data-[state=active]:bg-primary data-[state=active]:text-primary-foreground"
                  >
                    <PenLineIcon /> ƒê·ªÅ b√†i
                  </TabsTrigger>
                  <TabsTrigger
                    value="review"
                    className="rounded-full data-[state=active]:bg-primary data-[state=active]:text-primary-foreground"
                  >
                    <MessageCircle /> Nh·∫≠n x√©t
                  </TabsTrigger>
                  <TabsTrigger
                    value="listen"
                    className="rounded-full data-[state=active]:bg-primary data-[state=active]:text-primary-foreground"
                  >
                    <Headphones /> Nghe l·∫°i
                  </TabsTrigger>
                </TabsList>
                <TabsContent value="topic" className="h-full overflow-auto">
                  <div className="mb-3 overflow-auto">
                    {testData.task === "1" ? (
                      <>
                        <div className="mb-3">
                          <p className="font-semibold bg-slate-200 rounded-full px-3 py-1 w-fit text-xs mb-2">
                            Part 1
                          </p>
                          {testData.topic.map((v, i) => (
                            <p
                              className="py-2 px-3 rounded-lg border border-1 mb-3 bg-slate-50/50"
                              key={i}
                            >
                              {v}
                            </p>
                          ))}
                        </div>
                      </>
                    ) : (
                      <>
                        <div className="mb-3">
                          <p className="font-semibold bg-slate-200 rounded-full px-3 py-1 w-fit text-xs mb-2">
                            Part 2
                          </p>
                          {testData.topic.task_two_question}
                        </div>
                        <div>
                          <p className="font-semibold bg-slate-200 rounded-full px-3 py-1 w-fit text-xs mb-2">
                            Part 3
                          </p>
                          {testData.topic.task_three_follow_up.map((v, i) => (
                            <p key={i}>{v}</p>
                          ))}
                        </div>
                      </>
                    )}
                  </div>
                </TabsContent>
                <TabsContent value="review">
                  <div className="mb-3">
                    <p className="text-lg font-semibold">Nh·∫≠n x√©t</p>
                    <p className="text-slate-500">
                      {testData.review.general_feedback}
                    </p>
                  </div>
                </TabsContent>
                <TabsContent value="listen">
                  <p className="font-semibold mb-3">Nghe l·∫°i b√†i n√≥i c·ªßa b·∫°n</p>
                  <audio controls className="w-full mb-10">
                    <source src={testData.uploaded_content} type="audio/wav" />
                  </audio>
                  {typeof testData.pronunciation_accuracy === "object" ? (
                    <Drawer>
                      <DrawerTrigger asChild>
                        <Button className="w-full">Xem ph√°t √¢m c·ªßa b·∫°n</Button>
                      </DrawerTrigger>
                      <DrawerContent className="h-[90%]">
                        <DrawerHeader>
                          <DrawerTitle>Xem l·∫°i b√†i l√†m c·ªßa b·∫°n</DrawerTitle>
                          <DrawerDescription>
                            B√†i l√†m c·ªßa b·∫°n ·ªü dang ch·ªØ. N·∫øu c√≥ l·ªói ph√°t √¢m th√¨
                            t·ª´ ƒë√≥ s·∫Ω ƒë∆∞·ª£c hightlight nha.
                          </DrawerDescription>
                        </DrawerHeader>
                        <div className="px-4">
                          {testData.pronunciation_accuracy.length === 0 ? (
                            <p className="text-green-600 font-semibold">
                              T·ªët l·∫Øm! H·ªá th·ªëng c·ªßa ch√∫ng m√¨nh kh√¥ng ph√°t hi·ªán
                              l·ªói sai ph√°t √¢m{" "}
                            </p>
                          ) : (
                            <p className="text-yellow-600">
                              H√£y xem nh·ªØng s·ª≠a ph√°t √¢m d∆∞·ªõi n√†y nha
                            </p>
                          )}
                          {testData.user_response_raw !== "" ? (
                            <TextHighlighter
                              text={testData.user_response_raw}
                              highlightData={testData.pronunciation_accuracy}
                            />
                          ) : (
                            "B√†i l√†m c·ªßa b·∫°n ch∆∞a h·ªó tr·ª£ ch·ª©c nƒÉng n√†y. Vui l√≤ng t·∫°o l·∫ßn th·ª≠ m·ªõi ·ªü phi√™n b·∫£n m·ªõi."
                          )}
                        </div>
                      </DrawerContent>
                    </Drawer>
                  ) : (
                    <>
                      <Button className="w-full" disabled={true}>
                        Xem ph√°t √¢m c·ªßa b·∫°n
                      </Button>
                      <p className="text-red">
                        B√†i n√≥i n√†y ƒë∆∞·ª£c th·ª±c hi·ªán tr∆∞·ªõc khi ch·ª©c nƒÉng n√†y ƒë∆∞·ª£c
                        c·∫≠p nh·∫≠t. Vui l√≤ng th·ª≠ l·∫°i b·∫±ng l·∫ßn ki·ªÉm tra kh√°c
                      </p>
                    </>
                  )}
                </TabsContent>
              </Tabs>
            </div>
          </div>
          <div className="w-full">
            <Tabs className="w-full h-[400px]" defaultValue="chat">
              <div className="">
                <p className="text-3xl font-bold tracking-tight">
                  C√¢u tr·∫£ l·ªùi c·ªßa {userStore.user.fullname}
                </p>
                <p className="text-slate-500 mb-3">
                  To√†n b·ªô c√¢u tr·∫£ l·ªùi c·ªßa b·∫°n ƒë∆∞·ª£c AI t√°ch ra t·ª´ ƒëo·∫°n ghi √¢m.
                  H√£y ·∫•n v√†o c√¢u tr·∫£ l·ªùi c·ªßa b·∫°n ƒë·ªÉ th·∫•y ƒë∆∞·ª£c c√¢u tr·∫£ l·ªùi ƒë√£
                  ƒë∆∞·ª£c AI c·∫£i thi·ªán nha
                </p>
                <TabsList className="grid w-fit grid-cols-3 mb-3 rounded-full px-1">
                  <TabsTrigger
                    value="chat"
                    className="rounded-full data-[state=active]:bg-primary data-[state=active]:text-primary-foreground px-2"
                  >
                    <MessageCircle /> D·∫°ng chat
                  </TabsTrigger>
                  <TabsTrigger
                    value="paragraph"
                    className="rounded-full data-[state=active]:bg-primary data-[state=active]:text-primary-foreground px-2"
                  >
                    <Mic /> D·∫°ng t·ªïng th·ªÉ
                  </TabsTrigger>
                  <TabsTrigger
                    value="errorlist"
                    className="rounded-full data-[state=active]:bg-primary data-[state=active]:text-primary-foreground px-2"
                  >
                    <Mic /> B·∫£ng ch·ªØa l·ªói
                  </TabsTrigger>
                </TabsList>
              </div>
              <TabsContent
                value="chat"
                className="w-full rounded-lg md:bg-slate-50 md:px-5 md:pt-5 max-w-fit h-fit md:pb-5 pb-50"
              >
                <div className="w-full rounded-lg md:bg-sky-600/20 p-3 max-w-fit text-sky-600 font-semibold mb-3 md:block hidden">
                  B·∫°ch D∆∞∆°ng s·∫Ω th·ª≠ ph√¢n bi·ªát c√¢u tr·∫£ l·ªùi c·ªßa b·∫°n v√† c√¢u h·ªèi m√†
                  b·∫°n ƒëang tr·∫£ l·ªùi. N·∫øu c√≥ sai s√≥t th√¨ kh√¥ng ph·∫£i lo l·∫Øng nha!
                  ƒêi·ªÉm c·ªßa b·∫°n ƒë∆∞·ª£c ch·∫•m tr√™n t·ªïng th·ªÉ n√™n s·∫Ω kh√¥ng b·ªã ·∫£nh h∆∞·ªüng
                  üòÑ. N·∫øu b·∫°n c·∫ßn xem c√°c s·ª≠a ch·ªØa th√¨ h√£y ·∫•n v√†o d·∫°ng t·ªïng th·ªÉ
                  nha.
                </div>
                <div className="mb-5">
                  <div className="flex space-x-2">
                    <div className="flex-none w-fit h-fit top-0">
                      <Image
                        src="/logo.png"
                        height="50"
                        width="50"
                        className="w-[30px] h-[30px] rounded-full border border-1"
                        alt="logo"
                      />
                    </div>
                    <div className="h-fit p-3 bg-primary text-white rounded-xl border border-1 shadow-sm">
                      <p className="text-sm">
                        Hey there üëã! My name is Bach Duong and I will be your
                        IELTS examiner today! Lets begin our test and wish you
                        the best of luck üòâ
                      </p>
                    </div>
                  </div>
                </div>
                <div className="mb-5">
                  <div className="flex space-x-2">
                    <div className="flex-none w-fit h-fit top-0">
                      <Image
                        src="/logo.png"
                        height="50"
                        width="50"
                        className="w-[30px] h-[30px] rounded-full border border-1"
                        alt="logo"
                      />
                    </div>
                    <div className="h-fit p-3 bg-primary text-white rounded-xl border border-1 shadow-sm">
                      <p className="text-sm">
                        Your recording will be processed and I will try to see
                        which question you are answering to. I might make
                        mistakes but don't worry! This won't affect your band
                        score üòÑ
                      </p>
                    </div>
                  </div>
                </div>
                {testData.task === "1" ? (
                  <>
                    {partOne.map((v, i) => (
                      <div key={i}>
                        <div className="mb-5">
                          <div className="flex space-x-2">
                            <div className="flex-none w-fit h-fit top-0">
                              <Image
                                src="/logo.png"
                                height="50"
                                width="50"
                                className="w-[30px] h-[30px] rounded-full border border-1"
                                alt="logo"
                              />
                            </div>
                            <div className="h-fit p-3 bg-primary text-white rounded-xl border border-1 shadow-sm">
                              <p className="text-sm">{v.question}</p>
                            </div>
                          </div>
                        </div>
                        <div className="mb-3">
                          <div className="flex justify-end space-x-2">
                            <div className="h-fit p-3 bg-white rounded-xl border border-1 shadow-sm cursor-pointer">
                              <p className="text-sm">{v.response}</p>
                            </div>
                            <div className="h-inherit w-[30px] flex-none">
                              <Image
                                src={userStore.user.avatar || "/logo.png"}
                                height="50"
                                width="50"
                                className="w-[30px] h-[30px] rounded-full border border-1"
                                alt="logo"
                              />
                            </div>
                          </div>
                        </div>
                        <div className="mb-3">
                          <div className="flex space-x-2">
                            <div className="flex-none w-fit h-fit top-0">
                              <Image
                                src="/logo.png"
                                height="50"
                                width="50"
                                className="w-[30px] h-[30px] rounded-full border border-1"
                                alt="logo"
                              />
                            </div>
                            <div className="h-fit p-3 bg-primary text-white rounded-xl border border-1 shadow-sm">
                              <p className="font-semibold mb-3 text-sm">
                                B·∫°n c√≥ th·ªÉ tr·∫£ l·ªùi nh∆∞ sau:
                              </p>
                              <p className="text-sm">{v.improved_version}</p>
                            </div>
                          </div>
                        </div>
                      </div>
                    ))}
                  </>
                ) : (
                  <>
                    <p className="text-slate-500 font-semibold text-center mb-3">
                      Part 2
                    </p>
                    <div className="mb-3">
                      <div className="flex space-x-2">
                        <div className="h-fit top-0">
                          <Image
                            src="/logo.png"
                            height="50"
                            width="50"
                            className="w-[30px] h-[30px] rounded-full border border-1"
                            alt="logo"
                          />
                        </div>
                        <div className="h-fit p-3  bg-primary rounded-xl text-white shadow-sm">
                          <p className="text-sm">
                            {testData.topic.task_two_question}
                          </p>
                        </div>
                      </div>
                    </div>
                    <div className="mb-3">
                      <div className="flex justify-end space-x-2">
                        <div className="h-fit p-2 md:p-3  bg-white rounded-xl border border-1 shadow-sm cursor-pointer">
                          <p className="text-sm">{partTwo}</p>
                        </div>
                        <div className="h-inherit flex-none w-fit">
                          <Image
                            src={userStore.user.avatar || "/logo.png"}
                            height="50"
                            width="50"
                            className="w-[30px] h-[30px] rounded-full border border-1"
                            alt="logo"
                          />
                        </div>
                      </div>
                    </div>
                    <div className="mb-3">
                      <div className="flex space-x-2">
                        <div className="h-fit w-fit flex-none top-0">
                          <Image
                            src="/logo.png"
                            height="50"
                            width="50"
                            className="w-[30px] h-[30px] rounded-full border border-1"
                            alt="logo"
                          />
                        </div>
                        <div className="h-fit p-3 bg-primary rounded-xl text-white shadow-sm">
                          <p className="text-sm">
                            {testData.review.specific_feedback[0].feedback}
                          </p>
                        </div>
                      </div>
                    </div>
                    <div className="mb-3">
                      <div className="flex space-x-2">
                        <div className="flex-none w-fit h-fit top-0">
                          <Image
                            src="/logo.png"
                            height="50"
                            width="50"
                            className="w-[30px] h-[30px] rounded-full border border-1"
                            alt="logo"
                          />
                        </div>
                        <div className="h-fit p-3 bg-primary rounded-xl text-white shadow-sm">
                          <p className="text-sm">
                            B·∫°n c√≥ th·ªÉ th·ª≠ tr·∫£ l·ªùi nh∆∞ th·∫ø n√†y:{" "}
                          </p>
                          <p className="font-semibold text-sm">
                            {
                              testData.review.specific_feedback[0]
                                .improved_version
                            }
                          </p>
                        </div>
                      </div>
                    </div>
                    <p className="text-slate-500 font-semibold text-center mb-3">
                      Part 3
                    </p>
                    {partThree.map((v, i) => (
                      <div key={i}>
                        <div className="mb-3">
                          <div className="flex space-x-2">
                            <div className="h-fit top-0">
                              <Image
                                src="/logo.png"
                                height="50"
                                width="50"
                                className="w-[30px] h-[30px] rounded-full border border-1"
                                alt="logo"
                              />
                            </div>
                            <div className="h-fit md:p-3 bg-primary rounded-xl text-white shadow-sm">
                              <p className="text-sm">{v.question}</p>
                            </div>
                          </div>
                        </div>
                        <div className="mb-3">
                          <div className="flex justify-end space-x-2">
                            <div className="h-fit md:p-3 p-2  bg-white rounded-xl border border-1 shadow-sm">
                              <p className="text-sm">{v.response}</p>
                            </div>
                            <div className="h-inherit w-[30px] flex-none">
                              <Image
                                src={userStore.user.avatar || "/logo.png"}
                                height="50"
                                width="50"
                                className="w-[30px] h-[30px] rounded-full border border-1"
                                alt="logo"
                              />
                            </div>
                          </div>
                        </div>
                        <div className="mb-3">
                          <div className="flex space-x-2">
                            <div className="h-fit top-0">
                              <Image
                                src="/logo.png"
                                height="50"
                                width="50"
                                className="w-[30px] h-[30px] rounded-full border border-1"
                                alt="logo"
                              />
                            </div>
                            <div className="h-fit md:p-3 p-2  bg-primary rounded-xl text-white shadow-sm">
                              <p className="text-sm">
                                B·∫°n c√≥ th·ªÉ th·ª≠ tr·∫£ l·ªùi nh∆∞ th·∫ø n√†y:
                              </p>
                              <p className="font-semibold text-sm">
                                {v.improved_version}
                              </p>
                            </div>
                          </div>
                        </div>
                      </div>
                    ))}
                    <div className="mb-3">
                      <div className="flex items-center space-x-2">
                        <div className="h-fit top-0">
                          <Image
                            src="/logo.png"
                            height="50"
                            width="50"
                            className="w-[30px] h-[30px] rounded-full border border-1"
                            alt="logo"
                          />
                        </div>
                        <div className="h-fit md:p-3 p-2  bg-primary rounded-xl text-white shadow-sm">
                          <p>
                            {testData.review.specific_feedback[1] !== undefined
                              ? testData.review.specific_feedback[1].feedback
                              : ""}
                          </p>
                        </div>
                      </div>
                    </div>
                  </>
                )}
              </TabsContent>
              <TabsContent
                value="paragraph"
                className="w-full rounded-lg border border-1"
              >
                <div className="bg-slate-100 rounded-lg h-fit">
                  <div className="p-3">
                    {testData.review.grammar_improvements.length === 0 &&
                    testData.review.vocab_improvements.length === 0 ? (
                      <p className="text-green-600 font-semibold">
                        T·ªët l·∫Øm. Sau khi c√¢n nh·∫Øc band ƒëi·ªÉm b·∫°n ƒë√£ ch·ªçn v√† c√¢u
                        tr·∫£ l·ªùi c·ªßa b·∫°n th√¨ kh√¥ng c√≥ g√¨ ph·∫£i s·ª≠a nha!
                      </p>
                    ) : (
                      <p className="text-yellow-600 font-semibold">
                        H√£y xem nh·ªØng s·ª≠a ch·ªØa d∆∞·ªõi ƒë√¢y ƒë·ªÉ c·∫£i thi·ªán band ƒëi·ªÉm
                        c·ªßa b·∫°n nha!
                      </p>
                    )}
                  </div>
                  <div className="w-full p-3 bg-white rounded-lg border border-t-1 border-b-0 border-l-0 border-r-0">
                    {improveFunc(testData, testData.user_response_raw)}
                  </div>
                </div>
              </TabsContent>
              <TabsContent value="errorlist" className="w-full rounded-lg">
                {testData.review.grammar_improvements.length === 0 &&
                testData.review.vocab_improvements.length === 0 ? (
                  <p className="text-green-600 font-semibold mb-3">
                    T·ªët l·∫Øm. Sau khi c√¢n nh·∫Øc band ƒëi·ªÉm b·∫°n ƒë√£ ch·ªçn v√† c√¢u tr·∫£
                    l·ªùi c·ªßa b·∫°n th√¨ kh√¥ng c√≥ g√¨ ph·∫£i s·ª≠a nha!
                  </p>
                ) : (
                  <p className="text-yellow-600 font-semibold mb-3">
                    H√£y xem nh·ªØng s·ª≠a ch·ªØa d∆∞·ªõi ƒë√¢y ƒë·ªÉ c·∫£i thi·ªán band ƒëi·ªÉm c·ªßa
                    b·∫°n nha!
                  </p>
                )}
                {testData.review.grammar_improvements.map((v, i) => (
                  <div
                    className="bg-slate-100 rounded-lg h-fit border border-1 mb-3 md:w-fit w-full"
                    key={i}
                  >
                    <div className="p-3">
                      <p className="text-sm font-semibold px-3 py-1 bg-red-500/20 text-red-500 rounded-full border border-1 border-red-500 w-fit">
                        C·∫£i thi·ªán ng·ªØ ph√°p
                      </p>
                    </div>
                    <div className="w-full p-3 bg-white rounded-t-lg border border-t-1 border-b-0 border-l-0 border-r-0 flex flex-wrap-1 items-center space-x-2">
                      <div className="bg-red-600/20 text-red-600 rounded-lg p-3 w-fit">
                        {v.to_improve}
                      </div>
                      <ArrowRight className="h-[20px] w-[20px]" />
                      <div className="bg-green-600/20 text-green-600 rounded-lg p-3 w-fit">
                        {v.improvement}
                      </div>
                    </div>
                    <div className="w-full p-3 bg-white rounded-b-lg border border-t-1 border-b-0 border-l-0 border-r-0">
                      <p className="text-slate-500 text-sm font-semibold">
                        T·∫°i sao:
                      </p>
                      <p className="text-slate-500 text-sm">{v.why}</p>
                    </div>
                  </div>
                ))}
                {testData.review.vocab_improvements.map((v, i) => (
                  <div
                    className="bg-slate-100 rounded-lg h-fit border border-1 mb-3 md:w-fit w-full"
                    key={i}
                  >
                    <div className="p-3">
                      <p className="text-sm font-semibold px-3 py-1 bg-amber-500/20 text-amber-500 rounded-full border border-1 border-amber-500 w-fit">
                        C·∫£i thi·ªán t·ª´ v·ª±ng
                      </p>
                    </div>
                    <div className="w-full p-3 bg-white rounded-t-lg border border-t-1 border-b-0 border-l-0 border-r-0 flex flex-wrap-1 items-center space-x-2">
                      <div className="bg-amber-600/20 text-amber-600 rounded-lg p-3 w-fit">
                        {v.to_improve}
                      </div>
                      <ArrowRight className="h-[20px] w-[20px]" />
                      <div className="bg-green-600/20 text-green-600 rounded-lg p-3 w-fit">
                        {v.improvement}
                      </div>
                    </div>
                    <div className="w-full p-3 bg-white rounded-b-lg border border-t-1 border-b-0 border-l-0 border-r-0">
                      <p className="text-slate-500 text-sm font-semibold">
                        T·∫°i sao:
                      </p>
                      <p className="text-slate-500 text-sm">{v.why}</p>
                    </div>
                  </div>
                ))}
                {testData.review.sentence_improvements.map((v, i) => (
                  <div
                    className="bg-slate-100 rounded-lg h-fit border border-1 mb-3 md:w-fit w-full"
                    key={i}
                  >
                    <div className="p-3">
                      <p className="text-sm font-semibold px-3 py-1 bg-purple-500/20 text-purple-500 rounded-full border border-1 border-purple-500 w-fit">
                        C·∫£i thi·ªán c·∫•u tr√∫c c√¢u
                      </p>
                    </div>
                    <div className="w-full p-3 bg-white rounded-t-lg border border-t-1 border-b-0 border-l-0 border-r-0 flex flex-wrap-1 items-center space-x-2">
                      <div className="bg-purple-600/20 text-purple-600 rounded-lg p-3 w-fit">
                        {v.to_improve}
                      </div>
                      <ArrowRight className="h-[20px] w-[20px]" />
                      <div className="bg-green-600/20 text-green-600 rounded-lg p-3 w-fit">
                        {v.improvement}
                      </div>
                    </div>
                    <div className="w-full p-3 bg-white rounded-b-lg border border-t-1 border-b-0 border-l-0 border-r-0">
                      <p className="text-slate-500 text-sm font-semibold">
                        T·∫°i sao:
                      </p>
                      <p className="text-slate-500 text-sm">{v.why}</p>
                    </div>
                  </div>
                ))}
              </TabsContent>
            </Tabs>
          </div>
        </motion.div>
      );
    }
  }
}

function LoadingSkeleton() {
  return (
    <div className="w-full h-screen md:p-10 p-5 md:flex md:space-x-5">
      <div className="md:grow">
        <Skeleton className="h-10 w-3/4 mb-4" />
        <Skeleton className="h-6 w-1/2 mb-8" />
        <Skeleton className="h-40 w-full mb-8" />
        <div className="space-y-4">
          <Skeleton className="h-20 w-full" />
          <Skeleton className="h-20 w-full" />
          <Skeleton className="h-20 w-full" />
        </div>
      </div>
      <div className="md:flex md:flex-none md:w-[35%] hidden h-fit w-full">
        <Skeleton className="h-[600px] w-full" />
      </div>
    </div>
  );
}
